name: Build and Release Images

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_all:
        description: "Build all services"
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/meshag-service

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services-changed: ${{ steps.changes.outputs.services }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' services/meshag-service/Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Service version: $VERSION"

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            services:
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'crates/**'
              - 'services/**'
              - 'docker/Dockerfile'

  build-service:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.services-changed == 'true' || github.event.inputs.build_all == 'true'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-changes.outputs.version }}

      - name: Build and push unified service image
        id: build-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=meshag-service-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=meshag-service-${{ matrix.platform }}
          platforms: ${{ matrix.platform }}

      - name: Output service image digest
        if: github.event_name != 'pull_request'
        run: |
          echo "Unified service image digest: ${{ steps.build-service.outputs.digest }}"

  security-scan:
    needs: [detect-changes, build-service]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (needs.detect-changes.outputs.services-changed == 'true' || github.event.inputs.build_all == 'true')
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  update-docker-compose:
    needs: [detect-changes, build-service]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.services-changed == 'true' || github.event.inputs.build_all == 'true')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose.yml with new image tags
        run: |
          VERSION="${{ needs.detect-changes.outputs.version }}"
          # Update all service references to use the unified image
          sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION|g" docker/docker-compose.yml
          sed -i "/dockerfile: docker\/Dockerfile/d" docker/docker-compose.yml

      - name: Commit updated docker-compose.yml
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docker/docker-compose.yml
          git diff --staged --quiet || git commit -m "Update docker-compose.yml with unified service version ${{ needs.detect-changes.outputs.version }}"
          git push
