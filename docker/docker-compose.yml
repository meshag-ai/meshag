version: '3.8'

services:
  # NATS JetStream for ultra-high-performance event streaming
  nats:
    image: nats:2.10-alpine
    container_name: meshag-nats
    ports:
      - "4222:4222" # Client connections
      - "8222:8222" # HTTP monitoring
      - "6222:6222" # Routing port for clustering
    command:
      - "--jetstream"
      - "--store_dir=/data"
      - "--http_port=8222"
    volumes:
      - nats_data:/data
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - meshag-network

  # Generic STT Service with Whisper Connector
  stt-service:
    build:
      context: .
      dockerfile: Dockerfile.stt-service
    container_name: meshag-stt-service
    ports:
      - "8081:8081"
    environment:
      - RUST_LOG=info
      - PORT=8081
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - NATS_URL=nats://nats:4222
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - meshag-network
    restart: unless-stopped

  # Generic LLM Service with OpenAI Connector
  llm-service:
    build:
      context: .
      dockerfile: Dockerfile.llm-service
    container_name: meshag-llm-service
    ports:
      - "8082:8082"
    environment:
      - RUST_LOG=info
      - PORT=8082
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - NATS_URL=nats://nats:4222
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - meshag-network
    restart: unless-stopped

  # Generic TTS Service
  tts-service:
    build:
      context: .
      dockerfile: Dockerfile.tts-service
    container_name: meshag-tts-service
    ports:
      - "8083:8083"
    environment:
      - RUST_LOG=info
      - PORT=8083
      # Add TTS provider API keys as needed
      # - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      # - AZURE_API_KEY=${AZURE_API_KEY}
      # - AZURE_REGION=${AZURE_REGION}
      - NATS_URL=nats://nats:4222
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - meshag-network
    restart: unless-stopped

  # Transport Service with Daily.co Integration
  transport-service:
    build:
      context: .
      dockerfile: Dockerfile.transport-service
    container_name: meshag-transport-service
    ports:
      - "8084:8084"
    environment:
      - RUST_LOG=info
      - PORT=8084
      - NATS_URL=nats://nats:4222
      - DAILY_API_KEY=${DAILY_API_KEY:-your-daily-api-key-here}
      - DAILY_DOMAIN=${DAILY_DOMAIN:-your-daily-domain-here}
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - meshag-network
    restart: unless-stopped

  # Valkey Commander (Optional - Web UI for Valkey)
  valkey-commander:
    image: rediscommander/redis-commander:latest
    container_name: meshag-valkey-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:valkey:6379
    depends_on:
      - valkey
    networks:
      - meshag-network
    profiles:
      - tools

  # Prometheus (Optional - Metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: meshag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - meshag-network
    profiles:
      - monitoring

  # Grafana (Optional - Metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: meshag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - meshag-network
    profiles:
      - monitoring

volumes:
  nats_data:
  prometheus_data:
  grafana_data:


networks:
  meshag-network:
    driver: bridge
